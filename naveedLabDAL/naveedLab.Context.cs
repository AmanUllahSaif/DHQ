//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace naveedLabDAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class NaveedLabFinalDBEntities : DbContext
    {
        public NaveedLabFinalDBEntities()
            : base("name=NaveedLabFinalDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAgeFactor> tblAgeFactors { get; set; }
        public virtual DbSet<tblBranch> tblBranches { get; set; }
        public virtual DbSet<tblChapter> tblChapters { get; set; }
        public virtual DbSet<tblDoctor> tblDoctors { get; set; }
        public virtual DbSet<tblEmployee> tblEmployees { get; set; }
        public virtual DbSet<tblPatientTest> tblPatientTests { get; set; }
        public virtual DbSet<tblResult> tblResults { get; set; }
        public virtual DbSet<tblTest> tblTests { get; set; }
        public virtual DbSet<tblTestParameter> tblTestParameters { get; set; }
        public virtual DbSet<tblPatient> tblPatients { get; set; }
    
        public virtual int addParameterInSpecificAgeFactor(Nullable<int> id, string value)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addParameterInSpecificAgeFactor", idParameter, valueParameter);
        }
    
        public virtual int changePassword(string email, string newPassword)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("newPassword", newPassword) :
                new ObjectParameter("newPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("changePassword", emailParameter, newPasswordParameter);
        }
    
        public virtual int deleteDoctor(Nullable<int> doctorId)
        {
            var doctorIdParameter = doctorId.HasValue ?
                new ObjectParameter("DoctorId", doctorId) :
                new ObjectParameter("DoctorId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteDoctor", doctorIdParameter);
        }
    
        public virtual int deleteEmployees(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteEmployees", emailParameter);
        }
    
        public virtual int deleteParameterFromSpecificAgeFactor(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteParameterFromSpecificAgeFactor", idParameter);
        }
    
        public virtual ObjectResult<getAllBranches_Result> getAllBranches()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllBranches_Result>("getAllBranches");
        }
    
        public virtual ObjectResult<getDoctors_Result> getDoctors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getDoctors_Result>("getDoctors");
        }
    
        public virtual ObjectResult<getEmployees_Result> getEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getEmployees_Result>("getEmployees");
        }
    
        public virtual int insertTestParameterResult(Nullable<int> resultID, Nullable<int> patientID, string parameterValue, Nullable<int> testID)
        {
            var resultIDParameter = resultID.HasValue ?
                new ObjectParameter("resultID", resultID) :
                new ObjectParameter("resultID", typeof(int));
    
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            var parameterValueParameter = parameterValue != null ?
                new ObjectParameter("parameterValue", parameterValue) :
                new ObjectParameter("parameterValue", typeof(string));
    
            var testIDParameter = testID.HasValue ?
                new ObjectParameter("testID", testID) :
                new ObjectParameter("testID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertTestParameterResult", resultIDParameter, patientIDParameter, parameterValueParameter, testIDParameter);
        }
    
        public virtual ObjectResult<selectAgeFactor_Result> selectAgeFactor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectAgeFactor_Result>("selectAgeFactor");
        }
    
        public virtual ObjectResult<selectChapter_Result> selectChapter()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectChapter_Result>("selectChapter");
        }
    
        public virtual ObjectResult<selectPatient_Result> selectPatient(Nullable<int> pId)
        {
            var pIdParameter = pId.HasValue ?
                new ObjectParameter("pId", pId) :
                new ObjectParameter("pId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectPatient_Result>("selectPatient", pIdParameter);
        }
    
        public virtual ObjectResult<selectPatientByID_Result> selectPatientByID(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectPatientByID_Result>("selectPatientByID", iDParameter);
        }
    
        public virtual ObjectResult<selectPatientNameAndTests_Result> selectPatientNameAndTests(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectPatientNameAndTests_Result>("selectPatientNameAndTests", idParameter);
        }
    
        public virtual ObjectResult<selectResultedTest_Result> selectResultedTest(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectResultedTest_Result>("selectResultedTest", patientIDParameter);
        }
    
        public virtual ObjectResult<selectResultForPrint_Result> selectResultForPrint(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectResultForPrint_Result>("selectResultForPrint", iDParameter);
        }
    
        public virtual ObjectResult<selectTestInChapter_Result> selectTestInChapter(Nullable<int> chapterID)
        {
            var chapterIDParameter = chapterID.HasValue ?
                new ObjectParameter("chapterID", chapterID) :
                new ObjectParameter("chapterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectTestInChapter_Result>("selectTestInChapter", chapterIDParameter);
        }
    
        public virtual ObjectResult<selectTestParametersForResult_Result> selectTestParametersForResult(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectTestParametersForResult_Result>("selectTestParametersForResult", iDParameter);
        }
    
        public virtual ObjectResult<selectTestParametersInAgeRange_Result> selectTestParametersInAgeRange(Nullable<int> ageFactorID, Nullable<int> testID)
        {
            var ageFactorIDParameter = ageFactorID.HasValue ?
                new ObjectParameter("AgeFactorID", ageFactorID) :
                new ObjectParameter("AgeFactorID", typeof(int));
    
            var testIDParameter = testID.HasValue ?
                new ObjectParameter("testID", testID) :
                new ObjectParameter("testID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectTestParametersInAgeRange_Result>("selectTestParametersInAgeRange", ageFactorIDParameter, testIDParameter);
        }
    
        public virtual ObjectResult<SelectTestPrice_Result> SelectTestPrice()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SelectTestPrice_Result>("SelectTestPrice");
        }
    
        public virtual int setDoctor(string drName, string drGender, string drStatus, string drAddress, string drPhone, Nullable<int> sharePercentage)
        {
            var drNameParameter = drName != null ?
                new ObjectParameter("drName", drName) :
                new ObjectParameter("drName", typeof(string));
    
            var drGenderParameter = drGender != null ?
                new ObjectParameter("drGender", drGender) :
                new ObjectParameter("drGender", typeof(string));
    
            var drStatusParameter = drStatus != null ?
                new ObjectParameter("drStatus", drStatus) :
                new ObjectParameter("drStatus", typeof(string));
    
            var drAddressParameter = drAddress != null ?
                new ObjectParameter("drAddress", drAddress) :
                new ObjectParameter("drAddress", typeof(string));
    
            var drPhoneParameter = drPhone != null ?
                new ObjectParameter("drPhone", drPhone) :
                new ObjectParameter("drPhone", typeof(string));
    
            var sharePercentageParameter = sharePercentage.HasValue ?
                new ObjectParameter("sharePercentage", sharePercentage) :
                new ObjectParameter("sharePercentage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setDoctor", drNameParameter, drGenderParameter, drStatusParameter, drAddressParameter, drPhoneParameter, sharePercentageParameter);
        }
    
        public virtual int setEmployees(string email, string name, string password, string gender, string address, string designation, string phone, Nullable<int> branchFID)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var branchFIDParameter = branchFID.HasValue ?
                new ObjectParameter("BranchFID", branchFID) :
                new ObjectParameter("BranchFID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setEmployees", emailParameter, nameParameter, passwordParameter, genderParameter, addressParameter, designationParameter, phoneParameter, branchFIDParameter);
        }
    
        public virtual int setTestToPendingForUpdate(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setTestToPendingForUpdate", iDParameter);
        }
    
        public virtual int setTestToPrinted(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("setTestToPrinted", iDParameter);
        }
    
        public virtual ObjectResult<signInUser_Result> signInUser(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<signInUser_Result>("signInUser", emailParameter, passwordParameter);
        }
    
        public virtual int SpAddParameters(string p1, string p2)
        {
            var p1Parameter = p1 != null ?
                new ObjectParameter("P1", p1) :
                new ObjectParameter("P1", typeof(string));
    
            var p2Parameter = p2 != null ?
                new ObjectParameter("P2", p2) :
                new ObjectParameter("P2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SpAddParameters", p1Parameter, p2Parameter);
        }
    
        public virtual int spInsertParametersForRegisteredTests(Nullable<int> patientTestId, Nullable<int> testParameterId)
        {
            var patientTestIdParameter = patientTestId.HasValue ?
                new ObjectParameter("patientTestId", patientTestId) :
                new ObjectParameter("patientTestId", typeof(int));
    
            var testParameterIdParameter = testParameterId.HasValue ?
                new ObjectParameter("testParameterId", testParameterId) :
                new ObjectParameter("testParameterId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spInsertParametersForRegisteredTests", patientTestIdParameter, testParameterIdParameter);
        }
    
        public virtual int spIsPrinted(Nullable<int> patientID, ObjectParameter output)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spIsPrinted", patientIDParameter, output);
        }
    
        public virtual int updateDoctor(Nullable<int> drId, string drName, string drType, string address, string phone, Nullable<int> sharePercentage)
        {
            var drIdParameter = drId.HasValue ?
                new ObjectParameter("drId", drId) :
                new ObjectParameter("drId", typeof(int));
    
            var drNameParameter = drName != null ?
                new ObjectParameter("drName", drName) :
                new ObjectParameter("drName", typeof(string));
    
            var drTypeParameter = drType != null ?
                new ObjectParameter("drType", drType) :
                new ObjectParameter("drType", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var sharePercentageParameter = sharePercentage.HasValue ?
                new ObjectParameter("SharePercentage", sharePercentage) :
                new ObjectParameter("SharePercentage", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateDoctor", drIdParameter, drNameParameter, drTypeParameter, addressParameter, phoneParameter, sharePercentageParameter);
        }
    
        public virtual int updateEmployees(string email, string empName, string address, string designation, Nullable<int> brID, string phoneNo)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("empName", empName) :
                new ObjectParameter("empName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var brIDParameter = brID.HasValue ?
                new ObjectParameter("BrID", brID) :
                new ObjectParameter("BrID", typeof(int));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateEmployees", emailParameter, empNameParameter, addressParameter, designationParameter, brIDParameter, phoneNoParameter);
        }
    
        public virtual int updatePatient(Nullable<int> iD, string name, Nullable<int> age, string gender, string phone)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updatePatient", iDParameter, nameParameter, ageParameter, genderParameter, phoneParameter);
        }
    
        public virtual int UpdateTestCharges(string p1)
        {
            var p1Parameter = p1 != null ?
                new ObjectParameter("P1", p1) :
                new ObjectParameter("P1", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateTestCharges", p1Parameter);
        }
    
        public virtual ObjectResult<spSelectTestName_Result> spSelectTestName(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectTestName_Result>("spSelectTestName", iDParameter);
        }
    
        public virtual ObjectResult<selectAlreadyPrintedTest_Result> selectAlreadyPrintedTest(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectAlreadyPrintedTest_Result>("selectAlreadyPrintedTest", patientIDParameter);
        }
    
        public virtual ObjectResult<spSelectTestsRegisteredByPatient_Result> spSelectTestsRegisteredByPatient(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSelectTestsRegisteredByPatient_Result>("spSelectTestsRegisteredByPatient", patientIDParameter);
        }
    
        public virtual ObjectResult<sp_CalculateDoctor_Result> sp_CalculateDoctor(Nullable<int> docID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("docID", docID) :
                new ObjectParameter("docID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CalculateDoctor_Result>("sp_CalculateDoctor", docIDParameter, startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_CalculateSales_Result> sp_CalculateSales(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, string calType)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var calTypeParameter = calType != null ?
                new ObjectParameter("calType", calType) :
                new ObjectParameter("calType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CalculateSales_Result>("sp_CalculateSales", startDateParameter, endDateParameter, calTypeParameter);
        }
    
        public virtual int spUpdatePatientDiscountedCost(Nullable<decimal> patientID, Nullable<decimal> discountedCostPaid, Nullable<decimal> remainingpaidAmount)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(decimal));
    
            var discountedCostPaidParameter = discountedCostPaid.HasValue ?
                new ObjectParameter("discountedCostPaid", discountedCostPaid) :
                new ObjectParameter("discountedCostPaid", typeof(decimal));
    
            var remainingpaidAmountParameter = remainingpaidAmount.HasValue ?
                new ObjectParameter("remainingpaidAmount", remainingpaidAmount) :
                new ObjectParameter("remainingpaidAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdatePatientDiscountedCost", patientIDParameter, discountedCostPaidParameter, remainingpaidAmountParameter);
        }
    
        public virtual int spChkPatientTest(Nullable<decimal> patientID, ObjectParameter patinentCheck)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spChkPatientTest", patientIDParameter, patinentCheck);
        }
    
        public virtual int sp_ChkBil(Nullable<int> patientId, ObjectParameter remaingAmount)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ChkBil", patientIdParameter, remaingAmount);
        }
    
        public virtual int spAcceptRemainingPayment(Nullable<int> patientID, Nullable<int> balance, ObjectParameter output)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            var balanceParameter = balance.HasValue ?
                new ObjectParameter("balance", balance) :
                new ObjectParameter("balance", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAcceptRemainingPayment", patientIDParameter, balanceParameter, output);
        }
    
        public virtual ObjectResult<sp_GetDailyPatientID_Result> sp_GetDailyPatientID(Nullable<System.DateTime> dailyDate)
        {
            var dailyDateParameter = dailyDate.HasValue ?
                new ObjectParameter("dailyDate", dailyDate) :
                new ObjectParameter("dailyDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetDailyPatientID_Result>("sp_GetDailyPatientID", dailyDateParameter);
        }
    
        public virtual int DHQ_AddPatient(string patientName, Nullable<int> age, string gender, Nullable<int> doctorid, Nullable<System.DateTime> datePatient, string emailFid, string phone, string monthlyNo, ObjectParameter returnId)
        {
            var patientNameParameter = patientName != null ?
                new ObjectParameter("patientName", patientName) :
                new ObjectParameter("patientName", typeof(string));
    
            var ageParameter = age.HasValue ?
                new ObjectParameter("Age", age) :
                new ObjectParameter("Age", typeof(int));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var doctoridParameter = doctorid.HasValue ?
                new ObjectParameter("Doctorid", doctorid) :
                new ObjectParameter("Doctorid", typeof(int));
    
            var datePatientParameter = datePatient.HasValue ?
                new ObjectParameter("datePatient", datePatient) :
                new ObjectParameter("datePatient", typeof(System.DateTime));
    
            var emailFidParameter = emailFid != null ?
                new ObjectParameter("emailFid", emailFid) :
                new ObjectParameter("emailFid", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var monthlyNoParameter = monthlyNo != null ?
                new ObjectParameter("monthlyNo", monthlyNo) :
                new ObjectParameter("monthlyNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DHQ_AddPatient", patientNameParameter, ageParameter, genderParameter, doctoridParameter, datePatientParameter, emailFidParameter, phoneParameter, monthlyNoParameter, returnId);
        }
    
        public virtual ObjectResult<sp_CalculatePatientBill_Result> sp_CalculatePatientBill(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CalculatePatientBill_Result>("sp_CalculatePatientBill", patientIdParameter);
        }
    
        public virtual ObjectResult<sp_CalculateBill_Result> sp_CalculateBill(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CalculateBill_Result>("sp_CalculateBill", patientIdParameter);
        }
    
        public virtual int getDoctorID(Nullable<int> patientID, ObjectParameter outPut)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("getDoctorID", patientIDParameter, outPut);
        }
    
        public virtual ObjectResult<sp_CalculatePatientReport_Result> sp_CalculatePatientReport(Nullable<int> patientId)
        {
            var patientIdParameter = patientId.HasValue ?
                new ObjectParameter("patientId", patientId) :
                new ObjectParameter("patientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CalculatePatientReport_Result>("sp_CalculatePatientReport", patientIdParameter);
        }
    
        public virtual ObjectResult<sp_CountDoctor_Result> sp_CountDoctor(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CountDoctor_Result>("sp_CountDoctor", yearParameter);
        }
    
        public virtual ObjectResult<sp_Load_Flag_Result> sp_Load_Flag(string sFlag, Nullable<int> npId)
        {
            var sFlagParameter = sFlag != null ?
                new ObjectParameter("sFlag", sFlag) :
                new ObjectParameter("sFlag", typeof(string));
    
            var npIdParameter = npId.HasValue ?
                new ObjectParameter("npId", npId) :
                new ObjectParameter("npId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_Load_Flag_Result>("sp_Load_Flag", sFlagParameter, npIdParameter);
        }
    
        public virtual ObjectResult<sp_SelectTestMonthlyCount_Result> sp_SelectTestMonthlyCount(string testName, Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate)
        {
            var testNameParameter = testName != null ?
                new ObjectParameter("testName", testName) :
                new ObjectParameter("testName", typeof(string));
    
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectTestMonthlyCount_Result>("sp_SelectTestMonthlyCount", testNameParameter, startdateParameter, enddateParameter);
        }
    
        public virtual ObjectResult<sp_SelectTestYearlyCount_Result> sp_SelectTestYearlyCount(string year)
        {
            var yearParameter = year != null ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_SelectTestYearlyCount_Result>("sp_SelectTestYearlyCount", yearParameter);
        }
    
        public virtual ObjectResult<selectPatientTests_Result> selectPatientTests(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectPatientTests_Result>("selectPatientTests", patientIDParameter);
        }
    
        public virtual ObjectResult<selectPatientTestsForAddingResult_Result> selectPatientTestsForAddingResult(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectPatientTestsForAddingResult_Result>("selectPatientTestsForAddingResult", iDParameter);
        }
    
        public virtual ObjectResult<selectPatientTestsForAddingResultForUpdate_Result> selectPatientTestsForAddingResultForUpdate(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectPatientTestsForAddingResultForUpdate_Result>("selectPatientTestsForAddingResultForUpdate", iDParameter);
        }
    
        public virtual ObjectResult<selectPreviousBill_Result> selectPreviousBill(Nullable<int> patientID)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectPreviousBill_Result>("selectPreviousBill", patientIDParameter);
        }
    
        public virtual int spRegisterTest(Nullable<int> patientID, Nullable<int> testID, string employeeEmail, Nullable<int> specialDiscount, Nullable<int> ageFactor, Nullable<int> chkCount)
        {
            var patientIDParameter = patientID.HasValue ?
                new ObjectParameter("patientID", patientID) :
                new ObjectParameter("patientID", typeof(int));
    
            var testIDParameter = testID.HasValue ?
                new ObjectParameter("testID", testID) :
                new ObjectParameter("testID", typeof(int));
    
            var employeeEmailParameter = employeeEmail != null ?
                new ObjectParameter("employeeEmail", employeeEmail) :
                new ObjectParameter("employeeEmail", typeof(string));
    
            var specialDiscountParameter = specialDiscount.HasValue ?
                new ObjectParameter("specialDiscount", specialDiscount) :
                new ObjectParameter("specialDiscount", typeof(int));
    
            var ageFactorParameter = ageFactor.HasValue ?
                new ObjectParameter("ageFactor", ageFactor) :
                new ObjectParameter("ageFactor", typeof(int));
    
            var chkCountParameter = chkCount.HasValue ?
                new ObjectParameter("chkCount", chkCount) :
                new ObjectParameter("chkCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spRegisterTest", patientIDParameter, testIDParameter, employeeEmailParameter, specialDiscountParameter, ageFactorParameter, chkCountParameter);
        }
    }
}
